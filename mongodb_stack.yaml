heat_template_version: 2013-05-23

description: Deploys a salt master

parameter_groups:
  - parameters:
    - keyname
    - image
    - floating-network-id
    - apps-network
    - minion-count-mongos
    - minion-count-replicaset
    - minion-flavor-mongodb

parameters:
  keyname:
    type: string
    label: Key Name
    description: Name of the key used to log in to instances.

  image:
    type: string
    label: Image Name
    description: Name of the existing image to use for every virtual machine created by this stack.

  floating-network-id:
    type: string
    label: External Network UUID
    description: UUID of the external network. The private network created by this stack will route to this network. Any floating IP addresses needed by this stack will also route to this network.
  minion-count-mongos:
    type: number
    default: 2
    label: Number of Mongo Routing Servers (Mongos)
    description: Number of Mongos to create for this stack.

  minion-count-replicaset:
    type: number
    default: 3
    label: Number of Replica Sets
    description: Number of Mongo Routing Servers (mongos) in a cluster.

  minion-flavor-mongodb:
    type: string
    default: m1.small
    label: Flavor of Mongo Servers
    description: Flavor (size) of the Mongo servers to be created.

  apps-network:
    type: string
    label: Network UUID of Application Network
    description: UUID of the network where your applications run (for example, Magento, Drupal).

resources:

  # Random string to aid in naming things.
  stack-string:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  # Keypair for communicating between nodes within the stack.
  # Will allow minions to ssh into the master and vice versa.
  coms:
    type: OS::Nova::KeyPair
    properties:
     save_private_key: true
     name:
       str_replace:
         template: mongo-$stackstr-coms
         params:
           $stackstr:
             get_attr:
               - stack-string
               - value

  net:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id:
        get_resource: net
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 8.8.8.8
        - 4.2.2.2

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network:
          get_param: floating-network-id

  interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        get_resource: router
      subnet_id:
        get_resource: subnet

  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: mongodb-$stackstr-secgroup
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - protocol: tcp
          port_range_min: 4505
          port_range_max: 4506
        - protocol: tcp
          port_range_min: 27017
          port_range_max: 27019

  master-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id:
        get_param: floating-network-id

  master-port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_resource: net
      security_groups:
        - get_resource: secgroup

  config-salt-master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: state_repos
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-salt-master
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        chmod -R 0600 ${logdir}

        chmod 0700 /root/.ssh/coms_rsa

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install salt-master and git
        echo "Install Salt Master"
        add-apt-repository ppa:saltstack/salt
        apt-get update
        apt-get install -y git salt-master
        mkdir /srv/salt
        echo -e 'file_roots:\n  base:\n    - /srv/salt' >> /etc/salt/master

        # Clone state/formula repos in state root directory
        cd /srv/salt
        while read -r line
        do
            if [ -n "$line" ]; then
                git clone $line
            fi
        done <<< "$state_repos"
        # workaround for nested mongodb repo
        mv mongodb-formula/salt/top.sls mongodb-formula/salt/mongodb/ /srv/salt
        # Finally - Restart salt service
        service salt-master restart

        touch ${prefix}.ran

  config-salt-minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: master
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-salt-minion
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        chmod -R 0600 ${logdir}
        chmod 0700 /root/.ssh/coms_rsa

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install salt minion
        add-apt-repository ppa:saltstack/salt
        apt-get update -y
        apt-get install -y salt-minion
        echo master: $master >> /etc/salt/minion

        service salt-minion restart

        ssh-keyscan -H $master >> /root/.ssh/known_hosts

        echo "Sleeping for 20s"
        sleep 20

        MASTER_PKI_PATH="/etc/salt/pki/master/minions/"
        MASTER_PKI_PATH_PRE="/etc/salt/pki/master/minions_pre/"
        MINION_PKI_PATH="/etc/salt/pki/minion/minion.pub"
        HOSTNAME=`hostname --fqdn`

        cp $MINION_PKI_PATH /root/minion_key

        scp -i /root/.ssh/coms_rsa /root/minion_key root@$master:/tmp/$HOSTNAME

        ssh -i /root/.ssh/coms_rsa root@$master "mv /tmp/$HOSTNAME $MASTER_PKI_PATH$HOSTNAME; chmod 700 $MASTER_PKI_PATH$HOSTNAME; rm $MASTER_PKI_PATH_PRE$HOSTNAME"

        service salt-minion restart
        rm /root/minion_key
        rm /root/.ssh/coms_rsa

        cat <<EOF > /etc/network/interfaces.d/eth1.cfg
        #File generated by Heat.
        auto eth1
        iface eth1 inet dhcp
        EOF
        #Bring up second nic, will ignore if eth1 does not exist.
        ifup eth1

        touch ${prefix}.ran

  deploy-salt-master:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        state_repos: |
          https://github.com/rcbops/mongodb-formula
          https://github.com/rcbops/base-hardening-formula
      config:
        get_resource: config-salt-master
      server:
        get_resource: master

  master:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      key_name:
        get_param: keyname
      image:
        get_param: image
      flavor: m1.small
      name:
        str_replace:
          template: mongodb-$stackstr-master
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      personality:
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        /srv/pillar/top.sls: |
          base:
            '*':
              - mongodb.global
            roles:mongodb.mongos:
              - match: grain
            roles:mongodb.mongodb:
              - match: grain
            roles:mongodb.configserver:
              - match: grain

        /srv/pillar/mongodb/global/init.sls: |
          user-ports:
            ssh:
              chain: INPUT
              proto: tcp
              dport: 22
            salt-master:
              chain: INPUT
              proto: tcp
              dport: 4505
            salt-minion:
              chain: INPUT
              proto: tcp
              dport: 4506
            mongo-port:
              chain: INPUT
              proto: tcp
              dport: 27017:27019
          configserver:
            public_interface: eth0
            port: 27019
          mongodb:
            public_interface: eth0
            port: 27017
          mongos:
            public_interface: eth0
            port: 27017
          mine_functions:
            network.interfaces: []
          mine_interval: 1

      networks:
        - port:
            get_resource: master-port
      user_data_format: SOFTWARE_CONFIG

  master-floating-ip-ass:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id:
        get_resource: master-ip
      port_id:
        get_resource: master-port

  minion-group-mongoconfigsrv:
    type: OS::Heat::ResourceGroup
    depends_on: deploy-salt-master
    properties:
      count: 3
      resource_def:
        type: Salt::Minion
        properties:
          flavor: m1.small
          stack-prefix:
            str_replace:
              template: mongo-$stackstr-configsrv
              params:
                $stackstr:
                  get_attr:
                    - stack-string
                    - value
          private_key:
            get_attr:
              - coms
              - private_key
          public_key:
            get_attr:
              - coms
              - public_key
          security_group:
              get_resource: secgroup
          image:
            get_param: image
          network:
            get_resource: net
          master:
            get_attr:
              - master
              - first_address
          minion-config:
            get_resource: config-salt-minion
          minion-roles: "mongodb.configserver"

  minion-group-replicaset:
    type: OS::Heat::ResourceGroup
    depends_on:
      - deploy-salt-master
    properties:
      count:
        get_param: minion-count-replicaset
      resource_def:
        type: MongoDB::ReplicaSet
        properties:
          flavor: 
            get_param: minion-flavor-mongodb
          stack-prefix:
            str_replace:
              template: mongo-$stackstr
              params:
                $stackstr:
                  get_attr:
                    - stack-string
                    - value
          private_key:
            get_attr:
              - coms
              - private_key
          public_key:
            get_attr:
              - coms
              - public_key
          image:
            get_param: image
          network:
            get_resource: net
          security_group:
            get_resource: secgroup
          master:
            get_attr:
              - master
              - first_address
          minion-config:
            get_resource: config-salt-minion
          minion-roles: "mongodb.mongodb"

  minion-group-mongos:
    type: OS::Heat::ResourceGroup
    depends_on:
      - deploy-salt-master
    properties:
      count:
        get_param: minion-count-mongos
      resource_def:
        type: Salt::MinionMongos
        properties:
          flavor: m1.small
          stack-prefix:
            str_replace:
              template: mongo-$stackstr-mongos
              params:
                $stackstr:
                  get_attr:
                    - stack-string
                    - value
          private_key:
            get_attr:
              - coms
              - private_key
          public_key:
            get_attr:
              - coms
              - public_key
          security_group:
            get_resource: secgroup
          image:
            get_param: image
          network:
            get_resource: net
          master:
            get_attr:
              - master
              - first_address
          minion-config:
            get_resource: config-salt-minion
          minion-roles: "mongodb.mongos"
          apps-net:
            get_param: apps-network


  config-deploy:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: rs-name
      group: script
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-deploy
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        salt '*' saltutil.refresh_pillar
        salt '*' mine.update
        salt '*' saltutil.sync_all
        salt -G -t 90 roles:mongodb.configserver state.highstate
        salt -G -t 90 roles:mongodb.mongos state.highstate
        salt -G -t 90 roles:mongodb.mongodb state.highstate
        salt -t 90 '*' state.sls base-hardening-formula.base-hardening-formula
        touch ${prefix}.ran

  deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config-deploy
      server:
        get_resource: master
    depends_on:
      - deploy-salt-master
      - minion-group-mongoconfigsrv
      - minion-group-mongos
      - minion-group-replicaset

outputs:
  master-ip:
    value:
      get_attr:
        - master-ip
        - floating_ip_address
  minion-web-ips:
    value:
      get_attr:
        - minion-group-mongoconfigsrv
        - minion-ip
  minion-stdout:
    value:
      get_attr:
        - minion-group-mongoconfigsrv
        - minion-stdout
  minion-stderr:
    value:
      get_attr:
        - minion-group-mongoconfigsrv
        - minion-stderr
